//EMERGENCY ROOM SINGLE PATIENT EXPERIENCE
//by Kyle Goodale
//CS50 Final Project

#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <random>
#include <ctime>

//Healthcare "data" class declarations

class Generators //for testing and simulation
{

public:
	Generators();
	const int sys_gen();
	const int dia_gen();
	const int pulse_gen();
	const int resp_gen();
	const float temp_gen();
	const int loc_gen();
	std::string time_gen();
};

class Vitals {
		
private:
		
	int systolic;
	int diastolic;
	int pulse;
	int resps;
	float temp;
	int loc;
	std::string time_taken;
	
	
public:
	Vitals(const int, const int, const int, const int, const float, const int, std::string);
	const int show_heart();
	const int show_resps();
	const int show_systolic();
	const int show_diastolic();
	const int show_loc();
	const float show_temp();
	std::string show_time();
	//construct a new set of vitals with constructor function and 
    //integer arguments in proper order for 
	//systolic, diastolic, pulse, resps, temp, LOC
	//each argument should be randomly generated by the vital sign's respective function

};

class Chart
{
private:
	std::vector<Vitals*> chart;
public:
	Chart();
	void update_chart(Vitals*);
	void print_chart();
};

//healthcare "actor" class declarations

class Patient
{
private:
	int complaint;
	std::vector<std::string> allergies;
	std::vector<std::string> vax;
	unsigned int last_po;
public:
	Generators* p_gen;
	Chart* p_ch;
	Patient();
	int chief_complaint();
	void set_allergies(std::string s);
	void set_vax(std::string s);
	void set_last_po(unsigned int n);
	void end_program(); 
	void set_complaint(const int);
	void will_see_you_now();

	
};

class Provider
{
protected:
	Patient* p_pt;
public:
	
	Provider(Patient*);
	void take_vital_signs();
	void chart_report();

};

class Nurse : public Provider
{

public:
	Nurse(Patient*);
	void triage();
	void draw_labs(const int);
	void place_iv();
	void perform_ekg();
	void pass_report();
};

class Physician : public Provider
{
private:
	Nurse* p_rn;
	
public:
	Physician(Patient*, Nurse*);
	void see_patient();
	void order_lab_tests(const int);
	void order_imaging(const int);
	void order_iv_drugs(const int);
	void emergency_procedure(const int);
	void call_consult(const int);// = new surgeon, etc.
	void admit_to_hospital();
	void pronounce_death();
};


class Psychiatrist : public Physician
{
public:
	Psychiatrist();
	void order_involuntary_commit();
	void prescribe();

};


int main()
{
	Patient user;
	Nurse nurse(&user);
	Physician doctor(&user, &nurse);
	const int cc = user.chief_complaint();
	user.set_complaint(cc);
	nurse.triage();
	doctor.see_patient();

}

//Generators attempt to simulate vitals signs for testing purposes
Generators::Generators() 
{}
const int Generators::sys_gen() 
{
	std::uniform_int_distribution<unsigned> sys_range(60, 200);
	std::default_random_engine x;
	int k = sys_range(x);
	const int final = k;

	return final;

}
const int Generators::dia_gen() 
{
	std::uniform_int_distribution<unsigned> dia_range(40, 90);
	std::default_random_engine x;
	int k = dia_range(x);
	const int final = k;

	return final;

}
const int Generators::pulse_gen() 
{
	std::uniform_int_distribution<unsigned> pulse_range(40, 130);
	std::default_random_engine x;
	int k = pulse_range(x);
	const int final = k;

	return final;

}
const int Generators::resp_gen() 
{
	std::uniform_int_distribution<unsigned> resp_range(8, 30);
	std::default_random_engine x;
	int k = resp_range(x);
	const int final = k;

	return final;
}
const float Generators::temp_gen() 
{
	std::uniform_real_distribution<float> temp_range(34.0, 41.0);
	std::default_random_engine x;
	
	float k = temp_range(x);
	const float final = k;

	return final;
}
const int Generators::loc_gen() 
{
	std::uniform_int_distribution<unsigned> loc_range(3, 15);
	std::default_random_engine x;
	int k = loc_range(x);
	const int final = k;

	return final;
}
std::string Generators::time_gen() 
{
	time_t now = time(0); // Get current time
	char buffer[26];

	if (ctime_s(buffer, sizeof(buffer), &now) == 0) {
		return buffer;
	}
	else
	{
		std::string error = "Error recording time.";
		return error;
	}
}


//class Vitals definitions
Vitals::Vitals(const int sys, const int dia, const int hr, const int rr, const float t, const int lc, std::string t) //systolic, diastolic, heart rate, resp, temp, level conciousness
	:systolic(sys), diastolic(dia), pulse(hr), resps(rr), temp(t), loc(lc), time_taken(t)
{
	
}
const int Vitals::show_heart()
{
	return Vitals::pulse;
	
}
const int Vitals::show_resps() 
{
	return Vitals::resps;
}
const int Vitals::show_systolic() 
{
	return Vitals::systolic;
}
const int Vitals::show_diastolic() 
{
	return Vitals::diastolic;
}
const int Vitals::show_loc() 
{
	return Vitals::loc;
}
const float Vitals::show_temp() 
{
	return Vitals::temp;
}
std::string Vitals::show_time() {
	
	return time_taken;


}

//class Chart definitions
Chart::Chart() {}
void Chart::update_chart(Vitals* s) 
{
	chart.push_back(s);
}
void Chart::print_chart()
{
	for (auto i : chart)
	{
		std::cout << std::endl;
		std::cout << i->show_time() << std::endl;
		std::cout << "Heart Rate: " << i->show_heart() << std::endl;
		std::cout << "Respiration Rate: " << i->show_resps() << std::endl;
		std::cout << "Blood Pressure: " << i->show_systolic() << "/" << i->show_diastolic() << std::endl;
		std::cout << "Level of Consciousness: " << i->show_loc() << "/15" << std::endl;
		std::cout << i->show_temp() << " degrees Celsius" << std::endl;
		
	}
	
	
}

//class Patient definitions
Patient::Patient()
	:complaint(0)
{
	p_ch = new Chart;
	p_gen = new Generators;
}
int Patient::chief_complaint()
{
	int count = 0;
	int input;
	std::cout << "What brings you into the emergency room?" << std::endl;
	std::cout << "Please select what is wrong by typing the corresponding number and pressing enter." << std::endl;
	std::cout << "1 - You are having chest pain and/or palpitations." << std::endl;
	std::cout << "2 - You are having trouble breathing or you are choking." << std::endl;
	std::cout << "3 - You have severe abdominal pain with or without nausea, vomiting, diarrhea." << std::endl;
	std::cout << "4 - You have a severe headache, vision changes, hearing loss, speech changes, or sudden weakness." << std::endl;
	std::cout << "6 - You were in a vehicular accident." << std::endl;
	std::cout << "7 - You think you might hurt or kill yourself." << std::endl;
	std::cout << "8 - You have a laceration or a nosebleed." << std::endl;
	std::cout << "9 - You were physically or sexually assaulted." << std::endl;
	std::cout << "10 - You fell or something hit you." << std::endl;
	std::cout << "11 - You just feel very sick, and at-home treatment is not working." << std::endl;
	std::cout << "12 - You do not know what is wrong, but you need help." << std::endl;
	std::cin >> input;
	while (input <= 0 || input > 12)
	{
		if (std::cin.fail())
		{
			std::cin.clear();
			std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
			std::cout << "Invalid entry." << std::endl;
			std::cin >> input;
			++count;
			if (count >= 3) {
				std::cout << "Stay where you are.  A nurse is coming to get you." << std::endl;
				return -999;//follow this up
			}
		}
	}
	std::cout << "Thank you for your patience. A nurse will be with you shortly." << std::endl;
	return input;
}
void Patient::end_program()
{
	std::cout << "Exiting program. The nurse will input your information." << std::endl;
	exit(3);
}
void Patient::set_allergies(std::string s) 
{
	allergies.push_back(s);
}
void Patient::set_vax(std::string s)
{
	vax.push_back(s);
}
void Patient::set_last_po(unsigned int n)
{
	last_po = n;
}
void Patient::set_complaint(const int com)
{
	if (com != -999)
	{
		complaint = com;
	}
	else
	{
		end_program();
	}
}
void Patient::will_see_you_now()
{
	//if (complaint == 3)
	//{

	//}
	
}

//base class Provider definitions

Provider::Provider(Patient* p)
	:p_pt(p)
{}
void Provider::take_vital_signs()
{
	
	const int systolic = p_pt->p_gen->sys_gen();
	const int diastolic = p_pt->p_gen->dia_gen();
	const int pulse = p_pt->p_gen->pulse_gen();
	const int resp = p_pt->p_gen->resp_gen();
	const float temp = p_pt->p_gen->temp_gen();
	const int loc = p_pt->p_gen->loc_gen();
	Vitals* s = new Vitals(systolic, diastolic, pulse, resp, temp, loc);
	p_pt->p_ch->update_chart(s);
}
void Provider::chart_report()
{
	p_pt->p_ch->print_chart();
}

//derived class Nurse definitions
Nurse::Nurse(Patient* q)
	:Provider(q)
{}
void Nurse::triage() 
{
	std::string line_allerg;
	std::string line_vax;
	std::string a_bridge;
	std::string v_bridge;
	int last_po;
	//if complaint = 1, 2, 3, 4, 5, 6, 7, 8, 9 , 10, 11, 12
	std::cout << "You are next in line." << std::endl;
	std::cout << "Answering these questions will be helpful to the nurse in the triage process:" << std::endl;
	std::cout << "Please enter the medications to which you are allergic.  If there are none, type q on a new line and press enter." << std::endl;
	while (getline(std::cin, line_allerg))
	{
		if (line_allerg == 'q')
		{
			break;
		}
		std::istringstream divider(line_allerg);
		while (divider >> a_bridge)
		{
			p_pt->set_allergies(a_bridge);
		}
	}
	std::cout << "Please list all of the vaccines that you have received." << std::endl;
	while (getline(std::cin, line_vax))
	{
		if (line_vax == 'q')
		{
			break;
		}
		std::istringstream separate(line_vax);
		while (separate >> v_bridge)
		{
			p_pt->set_vax(v_bridge);
		}
	}
	std::cout << "How many hours ago did you last eat or drink anything?" << std::endl;
	std::cin >> last_po;
	if (std::cin.fail())//if non-numeric...
	{
		std::cin.clear();
		std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
		std::cout << "Invalid entry." << std::endl;
		std::cin >> last_po;
		++count;
		if (count >= 3) {
			std::cout << "Too many invalid entries, you will need to tell the nurse." << std::endl;
		}
	}
	p_pt->set_last_po(last_po);

	//now take the first set of vital signs:
	std::cout << "The nurse will now take a first set of vital signs." << std::endl;
	take_vital_signs();

	//next step depends on acuity:
	std::cout << "Your chart has been updated.  Thank you for your patience while we find an available room in the department." << std::endl;
	

	
}
void Nurse::draw_labs(const int c) {}

//derived class Physician definitions
Physician::Physician(Patient* pt, Nurse* rn) 
	:Provider(pt), p_rn(rn)
{
}
void Physician::see_patient() 
{
	p_pt->will_see_you_now();
}
void Physician::order_lab_tests(const int t) 
{
	p_rn->draw_labs();
}





