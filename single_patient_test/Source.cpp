
#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>


//EMERGENCY ROOM SINGLE PATIENT EXPERIENCE
//by Kyle Goodale
//CS50 Final Project

//PROVIDERS

class Generators
{
public:
	Generators();
	const int sys_gen();
	const int dia_gen();
	const int pulse_gen();
	const int resp_gen();
	const int temp_gen();
	const int loc_gen();
};

class Vitals {
		
private:
	const int systolic;
	const int diastolic;
	const int pulse;
	const int resps;
	const int temp;
	const int loc;

	std::map<std::string, const int> v_set{
	{"systolic", systolic}, {"diastolic", diastolic},
	{"pulse", pulse}, {"resps", resps}, {"temp", temp},
	{"LOC", loc}
	};

public:
	Vitals(const int, const int, const int, const int, const int, const int);
	//construct a new set of vitals with constructor function and 
   //integer arguments in proper order for 
	//systolic, diastolic, pulse, resps, temp, LOC
	//each argument should be randomly generated by the vital sign's respective function

};

class Chart
{
private:
	std::vector<Vitals*> chart;
public:
	Chart();
	void update_chart(Vitals*);//push the pointer to a new map of vital signs onto the vector called 'chart'
};

class Patient
{
private:
	int complaint;
public:
	Generators* p_gen;
	Chart* p_ch;
	Patient();
	int chief_complaint();
	void set_complaint(int);
	int will_see_you_now();

};

class Provider
{
protected:
	Patient* p_pt;
public:
	
	Provider(Patient*);
	void take_vital_signs();
	
};

class Nurse : public Provider
{

public:
	Nurse(Patient*);
	void triage();
	void draw_labs(const int);
	void place_iv();
	void perform_ekg();
	void pass_report();
};

class Physician : public Provider
{
private:
	Nurse* p_rn;
	Surgeon* p_doc_surg = NULL;
	Psychiatrist* p_doc_psych = NULL;
	Anesthesio* p_doc_sleep = NULL;
	
public:
	Physician(Patient*, Nurse*);
	const int see_patient(const int);
	void order_lab_tests(const int);
	void order_imaging(const int);
	void order_iv_drugs(const int);
	void emergency_procedure(const int);
	void call_consult(const int);// = new surgeon, etc.
	void admit_to_hospital();
	void pronounce_death();
};

//SPECIALISTS
class Surgeon : public Physician
{
public:
	Surgeon();
	void reduce_and_cast_fracture();
	void remove_foreign_body();
	void goto_operating_room();


};

class Anesthesio : public Physician
{
public:
	Anesthesio();
	void intubate_advanced();
	void give_anesthesia();
	void give_analgesia();
};

class Psychiatrist : public Physician
{
public:
	Psychiatrist();
	void order_involuntary_commit();
	void prescribe();

};


int main()
{
	Patient user;
	Nurse nurse(&user);
	Physician doctor(&user, &nurse);
	const int cc = user.chief_complaint();
	user.set_complaint(cc);
	nurse.triage();
	doctor.see_patient(cc);

}

Vitals::Vitals(const int sys, const int dia, const int hr, const int rr, const int t, const int lc) //systolic, diastolic, heart rate, resp, temp, level conciousness
{

	v_set["systolic"] = sys; 
	v_set["diastolic"] = dia;
	v_set["pulse"] = hr;
	v_set["resps"] = rr;
	v_set["temp"] = t;
	v_set["loc"] = lc;

}
Chart::Chart() {}
Chart::update_chart(Vitals* s) 
{
	chart.push_back(s);
	//access with:
	//s[index].v_set["systolic"];
}

Patient::Patient()
	:complaint(0)
{
	p_ch = new Chart;
	p_gen = new Generators;
}

int Patient::chief_complaint()
{
	int input;
	std::cout << "What brings you into the emergency room?" << std::endl;
	std::cout << "Please select your complaint by typing the corresponding number and pressing enter:" << std::endl;
	std::cout << "1 - You are having chest pain." << std::endl;
	std::cout << "2 - You are having trouble breathing or are choking." << std::endl;
	std::cout << "3 - You have a headache or you think you had a seizure." << std::endl;
	std::cout << "4 - You have abdominal pain, vomiting, nausea, or diarrhea." << std::endl;
	std::cout << "5 - You fell and hit the ground or an outside force hit you, such as in a vehicular accident." << std::endl;
	std::cout << "6 - Some part of your body is not working, weak, or just 'hurting'." << std::endl;
	std::cout << "7 - You were assaulted." << std::endl;
	std::cout << "8 - You feel very sick, but none of the above." << std::endl;
	std::cout << "9 - You think you might hurt yourself on purpose." << std::endl;
	std::cin >> input;
	while (input <= 0 || input > 10)
	{
		if (std::cin.fail())
		{
			std::cin.clear();
			std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
			std::cout << "Invalid entry." << std::endl;
			std::cin >> input;
		}
	}
	return input;
}

void Patient::set_complaint(int com)
{
	complaint = com;
}

int Patient::will_see_you_now()
{
	const int chief_complaint = complaint;
	
}

Provider::Provider(Patient* p)
	:p_pt(p)
{}
void Provider::take_vital_signs()
{
	
	const int systolic = p_pt->p_gen->sys_gen();
	const int diastolic = p_pt->p_gen->dia_gen();
	const int pulse = p_pt->p_gen->pulse_gen();
	const int resp = p_pt->p_gen->resp_gen();
	const int temp = p_pt->p_gen->temp_gen();
	const int loc = p_pt->p_gen->loc_gen();
	Vitals* s = new Vitals(systolic, diastolic, pulse, resp, temp, loc);
	p_pt->p_ch->update_chart(s);
}
Nurse::Nurse(Patient* q)
	:Provider(q)
{}
void Nurse::triage() 
{
	Vitals* signs = new Vitals;
	take_vital_signs(signs);
}
void Nurse::draw_labs(const int c) {}
Physician::Physician(Patient* pt, Nurse* rn) 
	:Provider(pt), p_rn(rn)
{
}
const int Physician::see_patient() 
{
	return (p_pt->will_see_you_now());
}
void Physician::order_lab_tests(const int t) {}





